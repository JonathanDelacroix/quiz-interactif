var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { BaseTranslator } from '../BaseTranslator';
/**
 * This module did not test too ago
 */
var ReversoTranslator = /** @class */ (function (_super) {
    __extends(ReversoTranslator, _super);
    function ReversoTranslator() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.langMap = {
            en: 'eng',
            ar: 'ara',
            nl: 'dut',
            he: 'heb',
            es: 'spa',
            it: 'ita',
            zh: 'chi',
            de: 'ger',
            pl: 'pol',
            pt: 'por',
            ro: 'rum',
            ru: 'rus',
            tr: 'tur',
            fr: 'fra',
            ja: 'jpn',
        };
        return _this;
    }
    ReversoTranslator.isSupportedAutoFrom = function () {
        return false;
    };
    ReversoTranslator.getSupportedLanguages = function () {
        // eslint-disable
        // prettier-ignore
        return [
            'en', 'ar', 'nl', 'he', 'es', 'it', 'zh', 'de', 'pl', 'pt',
            'ro', 'ru', 'tr', 'fr', 'ja',
        ];
        // eslint-enable
    };
    ReversoTranslator.prototype.getLengthLimit = function () {
        return 5000;
    };
    ReversoTranslator.prototype.getRequestsTimeout = function () {
        return 1000;
    };
    ReversoTranslator.prototype.checkLimitExceeding = function (text) {
        if (Array.isArray(text)) {
            var arrayLen = text.reduce(function (acc, text) { return acc + text.length; }, 0);
            var extra = arrayLen - this.getLengthLimit();
            return extra > 0 ? extra : 0;
        }
        else {
            var extra = text.length - this.getLengthLimit();
            return extra > 0 ? extra : 0;
        }
    };
    ReversoTranslator.prototype.translate = function (text, from, to) {
        var localFrom = this.langMap[from];
        var localTo = this.langMap[to];
        var data = {
            input: text,
            from: localFrom,
            to: localTo,
            format: 'text',
            options: {
                origin: 'translation.web',
                sentenceSplitter: true,
                contextResults: true,
                languageDetection: false,
            },
        };
        var apiHost = this.wrapUrlToCorsProxy('https://api.reverso.net/translate/v1/translation');
        return this.fetch(apiHost, {
            responseType: 'json',
            method: 'POST',
            headers: __assign({ 'Content-Type': 'application/json; charset=utf-8' }, this.options.headers),
            body: JSON.stringify(data),
        }).then(function (rsp) {
            var response = rsp.data;
            if (!(response instanceof Object) ||
                !(response.translation instanceof Array) ||
                response.translation.every(function (i) { return typeof i !== 'string'; })) {
                throw new Error('Unexpected response');
            }
            return response.translation.join('');
        });
    };
    ReversoTranslator.prototype.translateBatch = function (text, langFrom, langTo) {
        var _this = this;
        return Promise.all(text.map(function (text) { return _this.translate(text, langFrom, langTo); }));
    };
    ReversoTranslator.translatorName = 'ReversoTranslator (public)';
    return ReversoTranslator;
}(BaseTranslator));
export { ReversoTranslator };

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyYW5zbGF0b3JzL3Vuc3RhYmxlL1JldmVyc29UcmFuc2xhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRW5EOztHQUVHO0FBQ0g7SUFBdUMscUNBQWM7SUFBckQ7UUFBQSxxRUFtR0M7UUEvRFEsYUFBTyxHQUEyQjtZQUN6QyxFQUFFLEVBQUUsS0FBSztZQUNULEVBQUUsRUFBRSxLQUFLO1lBQ1QsRUFBRSxFQUFFLEtBQUs7WUFDVCxFQUFFLEVBQUUsS0FBSztZQUNULEVBQUUsRUFBRSxLQUFLO1lBQ1QsRUFBRSxFQUFFLEtBQUs7WUFDVCxFQUFFLEVBQUUsS0FBSztZQUNULEVBQUUsRUFBRSxLQUFLO1lBQ1QsRUFBRSxFQUFFLEtBQUs7WUFDVCxFQUFFLEVBQUUsS0FBSztZQUNULEVBQUUsRUFBRSxLQUFLO1lBQ1QsRUFBRSxFQUFFLEtBQUs7WUFDVCxFQUFFLEVBQUUsS0FBSztZQUNULEVBQUUsRUFBRSxLQUFLO1lBQ1QsRUFBRSxFQUFFLEtBQUs7U0FDVCxDQUFDOztJQStDSCxDQUFDO0lBaEdjLHFDQUFtQixHQUFqQztRQUNDLE9BQU8sS0FBSyxDQUFDO0lBQ2QsQ0FBQztJQUVhLHVDQUFxQixHQUFuQztRQUNDLGlCQUFpQjtRQUNqQixrQkFBa0I7UUFDbEIsT0FBTztZQUNOLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUk7WUFDMUQsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUk7U0FDNUIsQ0FBQztRQUNGLGdCQUFnQjtJQUNqQixDQUFDO0lBRU0sMENBQWMsR0FBckI7UUFDQyxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFFTSw4Q0FBa0IsR0FBekI7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R0FBRyw0QkFBNEIsQ0FBQztJQWtHdEUsd0JBQUM7Q0FuR0QsQUFtR0MsQ0FuR3NDLGNBQWMsR0FtR3BEO1NBbkdZLGlCQUFpQiIsImZpbGUiOiJ0cmFuc2xhdG9ycy91bnN0YWJsZS9SZXZlcnNvVHJhbnNsYXRvci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGxhbmdDb2RlIH0gZnJvbSAnLi4vVHJhbnNsYXRvcic7XG5pbXBvcnQgeyBCYXNlVHJhbnNsYXRvciB9IGZyb20gJy4uL0Jhc2VUcmFuc2xhdG9yJztcblxuLyoqXG4gKiBUaGlzIG1vZHVsZSBkaWQgbm90IHRlc3QgdG9vIGFnb1xuICovXG5leHBvcnQgY2xhc3MgUmV2ZXJzb1RyYW5zbGF0b3IgZXh0ZW5kcyBCYXNlVHJhbnNsYXRvciB7XG5cdHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgdHJhbnNsYXRvck5hbWUgPSAnUmV2ZXJzb1RyYW5zbGF0b3IgKHB1YmxpYyknO1xuXG5cdHB1YmxpYyBzdGF0aWMgaXNTdXBwb3J0ZWRBdXRvRnJvbSgpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRwdWJsaWMgc3RhdGljIGdldFN1cHBvcnRlZExhbmd1YWdlcygpOiBsYW5nQ29kZVtdIHtcblx0XHQvLyBlc2xpbnQtZGlzYWJsZVxuXHRcdC8vIHByZXR0aWVyLWlnbm9yZVxuXHRcdHJldHVybiBbXG5cdFx0XHQnZW4nLCAnYXInLCAnbmwnLCAnaGUnLCAnZXMnLCAnaXQnLCAnemgnLCAnZGUnLCAncGwnLCAncHQnLFxuXHRcdFx0J3JvJywgJ3J1JywgJ3RyJywgJ2ZyJywgJ2phJyxcblx0XHRdO1xuXHRcdC8vIGVzbGludC1lbmFibGVcblx0fVxuXG5cdHB1YmxpYyBnZXRMZW5ndGhMaW1pdCgpIHtcblx0XHRyZXR1cm4gNTAwMDtcblx0fVxuXG5cdHB1YmxpYyBnZXRSZXF1ZXN0c1RpbWVvdXQoKSB7XG5cdFx0cmV0dXJuIDEwMDA7XG5cdH1cblxuXHRwdWJsaWMgY2hlY2tMaW1pdEV4Y2VlZGluZyh0ZXh0OiBzdHJpbmcgfCBzdHJpbmdbXSkge1xuXHRcdGlmIChBcnJheS5pc0FycmF5KHRleHQpKSB7XG5cdFx0XHRjb25zdCBhcnJheUxlbiA9IHRleHQucmVkdWNlKChhY2MsIHRleHQpID0+IGFjYyArIHRleHQubGVuZ3RoLCAwKTtcblx0XHRcdGNvbnN0IGV4dHJhID0gYXJyYXlMZW4gLSB0aGlzLmdldExlbmd0aExpbWl0KCk7XG5cdFx0XHRyZXR1cm4gZXh0cmEgPiAwID8gZXh0cmEgOiAwO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zdCBleHRyYSA9IHRleHQubGVuZ3RoIC0gdGhpcy5nZXRMZW5ndGhMaW1pdCgpO1xuXHRcdFx0cmV0dXJuIGV4dHJhID4gMCA/IGV4dHJhIDogMDtcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIGxhbmdNYXA6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7XG5cdFx0ZW46ICdlbmcnLFxuXHRcdGFyOiAnYXJhJyxcblx0XHRubDogJ2R1dCcsXG5cdFx0aGU6ICdoZWInLFxuXHRcdGVzOiAnc3BhJyxcblx0XHRpdDogJ2l0YScsXG5cdFx0emg6ICdjaGknLFxuXHRcdGRlOiAnZ2VyJyxcblx0XHRwbDogJ3BvbCcsXG5cdFx0cHQ6ICdwb3InLFxuXHRcdHJvOiAncnVtJyxcblx0XHRydTogJ3J1cycsXG5cdFx0dHI6ICd0dXInLFxuXHRcdGZyOiAnZnJhJyxcblx0XHRqYTogJ2pwbicsXG5cdH07XG5cblx0cHVibGljIHRyYW5zbGF0ZSh0ZXh0OiBzdHJpbmcsIGZyb206IGxhbmdDb2RlLCB0bzogbGFuZ0NvZGUpIHtcblx0XHRjb25zdCBsb2NhbEZyb20gPSB0aGlzLmxhbmdNYXBbZnJvbV07XG5cdFx0Y29uc3QgbG9jYWxUbyA9IHRoaXMubGFuZ01hcFt0b107XG5cblx0XHRjb25zdCBkYXRhID0ge1xuXHRcdFx0aW5wdXQ6IHRleHQsXG5cdFx0XHRmcm9tOiBsb2NhbEZyb20sXG5cdFx0XHR0bzogbG9jYWxUbyxcblx0XHRcdGZvcm1hdDogJ3RleHQnLFxuXHRcdFx0b3B0aW9uczoge1xuXHRcdFx0XHRvcmlnaW46ICd0cmFuc2xhdGlvbi53ZWInLFxuXHRcdFx0XHRzZW50ZW5jZVNwbGl0dGVyOiB0cnVlLFxuXHRcdFx0XHRjb250ZXh0UmVzdWx0czogdHJ1ZSxcblx0XHRcdFx0bGFuZ3VhZ2VEZXRlY3Rpb246IGZhbHNlLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0Y29uc3QgYXBpSG9zdCA9IHRoaXMud3JhcFVybFRvQ29yc1Byb3h5KFxuXHRcdFx0J2h0dHBzOi8vYXBpLnJldmVyc28ubmV0L3RyYW5zbGF0ZS92MS90cmFuc2xhdGlvbicsXG5cdFx0KTtcblx0XHRyZXR1cm4gdGhpcy5mZXRjaChhcGlIb3N0LCB7XG5cdFx0XHRyZXNwb25zZVR5cGU6ICdqc29uJyxcblx0XHRcdG1ldGhvZDogJ1BPU1QnLFxuXHRcdFx0aGVhZGVyczoge1xuXHRcdFx0XHQnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLTgnLFxuXHRcdFx0XHQuLi50aGlzLm9wdGlvbnMuaGVhZGVycyxcblx0XHRcdH0sXG5cdFx0XHRib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKSxcblx0XHR9KS50aGVuKChyc3ApID0+IHtcblx0XHRcdGNvbnN0IHJlc3BvbnNlID0gcnNwLmRhdGEgYXMgYW55O1xuXHRcdFx0aWYgKFxuXHRcdFx0XHQhKHJlc3BvbnNlIGluc3RhbmNlb2YgT2JqZWN0KSB8fFxuXHRcdFx0XHQhKHJlc3BvbnNlLnRyYW5zbGF0aW9uIGluc3RhbmNlb2YgQXJyYXkpIHx8XG5cdFx0XHRcdHJlc3BvbnNlLnRyYW5zbGF0aW9uLmV2ZXJ5KChpOiBhbnkpID0+IHR5cGVvZiBpICE9PSAnc3RyaW5nJylcblx0XHRcdCkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1VuZXhwZWN0ZWQgcmVzcG9uc2UnKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIChyZXNwb25zZS50cmFuc2xhdGlvbiBhcyBzdHJpbmdbXSkuam9pbignJyk7XG5cdFx0fSk7XG5cdH1cblxuXHRwdWJsaWMgdHJhbnNsYXRlQmF0Y2godGV4dDogc3RyaW5nW10sIGxhbmdGcm9tOiBsYW5nQ29kZSwgbGFuZ1RvOiBsYW5nQ29kZSkge1xuXHRcdHJldHVybiBQcm9taXNlLmFsbCh0ZXh0Lm1hcCgodGV4dCkgPT4gdGhpcy50cmFuc2xhdGUodGV4dCwgbGFuZ0Zyb20sIGxhbmdUbykpKTtcblx0fVxufVxuIl19
